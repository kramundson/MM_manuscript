shell.executable("bash")
import os, re
import pandas as pd
from Bio import SeqIO

configfile: "config.yaml"
units = pd.read_table(config["units"], index_col=["sample","unit"], dtype=str)
units.index = units.index.set_levels([i.astype(str) for i in units.index.levels])
PARENTS = set(zip(units.mother, units.inducer.dropna()))

# function that returns all sample names with a given parental combination, parsed from wildcards?
def get_bams(wildcards):
    tmp=units.loc[(units['mother'] == wildcards.mother) & (units['inducer'] == wildcards.inducer)]
    return set("../1_dosage/data/mapQ-filter/{}.bam".format(row[0]) for row in tmp.index.values)

rule all:
    input:
        ["bin_alleles/{}-{}-1Mb-alleles.txt".format(i[0], i[1]) for i in PARENTS]
        
rule bin_by_geno:
    input:
        alleles="alleles/{mother}-{inducer}-alleles.txt",
        #snplist="{mother}-{inducer}-snplist.txt"
    output:
        "bin_alleles/{mother}-{inducer}-1Mb-alleles.txt"
    params:
        binsize=config["params"]["binsize"]
    shell: """
        python2 scripts/bin-by-genotypeC.py {input.alleles} {output} {params.binsize}
    """

rule call_alleles:
    input:
        pmpup="parsed_mpup/parsed-{mother}-{inducer}-mpup.txt"
        # snplist="{mother}-{inducer}-snplist.txt"
    output:
        "alleles/{mother}-{inducer}-alleles.txt"
    shell: """
        python2 scripts/CallAllelesAB.py {input.pmpup} {output}
    """

rule parse_mpup:
    input:
        "mpup/{mother}-{inducer}-mpup.txt"
    output:
        "parsed_mpup/parsed-{mother}-{inducer}-mpup.txt"
    threads: 12
    shell: """
        python2 scripts/mpileup-parser-v2.py -f {input} -o {output} -t {threads}
    """
    
rule run_mpup:
    input:
        ref=config["genome"],
        bams=get_bams
    output:
        "mpup/{mother}-{inducer}-mpup.txt"
    params:
        mq=config["params"]["run_mpup"]["map_qual"],
        bq=config["params"]["run_mpup"]["base_qual"],
        maxdepth=config["params"]["run_mpup"]["max_depth"]
    shell: """
        samtools mpileup -l -d {params.maxdepth} -q {params.bq} -Q {params.mq} -f {output} {input.bams}
    """
