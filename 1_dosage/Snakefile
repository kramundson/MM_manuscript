shell.executable("bash")
import os, re
import pandas as pd
from Bio import SeqIO

configfile: "config.yaml"
units = pd.read_table(config["units"], index_col=["sample","unit"], dtype=str)
units.index = units.index.set_levels([i.astype(str) for i in units.index.levels])

samples = {}
for i in units.index.levels[0]:
    samples[i] = ["data/aligned_reads/{}-{}.bam".format(i, j) for j in units.loc[i].index]

def is_single_end(sample,unit):
    return pd.isnull(units.loc[(sample, unit), "fq2"])

def get_fastq(wildcards):
    return "data/reads/"+units.loc[(wildcards.sample, wildcards.unit), ['fq1', 'fq2']].dropna()

def get_fastq_test(wildcards):
    tmp = units.loc[units['parhap'] != 'mother']
    return "data/reads/"+tmp.loc[(wildcards.sample,wildcards.unit), ['fq1','fq2']].dropna()

def get_fastq_control(wildcards):
    tmp = units.loc[units['parhap'] == 'mother']
    return "data/reads/"+tmp.loc[(wildcards.sample,wildcards.unit), ['fq1','fq2']].dropna()

def get_trimmed(wildcards):
    if not is_single_end(**wildcards):
        # paired-end sample should be aligned as such
        return expand("data/trimmed/{sample}-{unit}-{group}.fastq.gz",
            group=[1,2], **wildcards)
    # single end sample
    return "data/trimmed/{sample}-{unit}.fastq.gz".format(**wildcards)
    
rule all:
    input:
        ["data/bedtools_coverage/{}.bed".format(i[0]) for i in units.index]

include: "rules/bedtools_coverage.rules"
include: "rules/samtools_index.rules"
include: "rules/bam_mapqual_filter.rules"
include: "rules/mark_duplicates.rules"
include: "rules/samtools_merge.rules"
include: "rules/align.rules"
include: "rules/cutadapt_pe.rules"
include: "rules/cutadapt.rules"
include: "rules/cutadapt_hardtrim.rules"
